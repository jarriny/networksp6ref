#!/usr/bin/env python3

import sys, socket, select, time, json, random, math

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]



# majority of replicas, votes we've gotten
MAJORITY = int(math.ceil(float((len(replica_ids) + 1)) / 2.0))
#this is 1 bc always agrees with itself
RESP_NUM = 1


# last timeout, random time until our next timeout
LAST_TO = None
ELECTION_TO = None


# role: follower, candidate, or leader
cur_role = 'follower'

cur_leader  = 'FFFF'

#who we voted for
my_vote  = None

TERM = 1


# The log for this replica
LOG = [{}]

# The key/value pairs
PAIRS = {}

# The timerwill use if it is a leader to send appendRCs
APP_TIMER = None
APP_LIMIT = 100


# Highest log entry known to be committed
COMMIT_INDEX = 0

# Highest log entry applied
LAST_APPLIED = 0


#FOR LEADER ONLY
# next log entry index to send
NEXT_INDICES = {}
# highest log index each server has replicated
MATCH_INDEX = {}
# Map from replica to timeout
# so we can skip heartbeat for replicas that were sent updates
HB_TO_MAP = {}
HB_LIMIT = 50

# Number of updates in each batch of appends
SEEN = 0


# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(my_id)

SELECT_WAIT_TIME = 0.01 # 10 milliseconds
TERMINATOR = b'}\n'
buffer = b''

# receiving messages from socket
def recv_msgs(sock):
    global buffer

    fresh_buf = sock.recv(16384)

    if len(fresh_buf) == 0:
        return None

    buffer += fresh_buf

    msgs = []
    while TERMINATOR in buffer:
        position = buffer.find(TERMINATOR) + len(TERMINATOR)
        msgs.append(json.loads(buffer[:position - 1].decode()))
        buffer = buffer[position:]

    return msgs

# resetting  election timeout countdown and picks new random timeout
def reset_timeout():
    global LAST_TO
    global ELECTION_TO
    # multiply by 1000 to get in ms 
    LAST_TO = float(time.time() * 1000)
    ELECTION_TO = random.randrange(150, 300)


def client_response(msg, mtype):
    return {'src': my_id, 'dst': msg['src'], 'leader': cur_leader , 'MID': msg['MID'], 'type': mtype}

#interacts with  client
def client_message(msg):
    global PAIRS
    global LOG
    global COUNT
    global SEEN
    # redirect to the leader if needed
    if cur_leader  != 'FFFF' and cur_leader  != my_id:
        msg = client_response(msg, 'redirect')
        sock.send(json.dumps(msg).encode() + b'\n')
    # If leader, add the entry to our log
    elif cur_leader  == my_id:
        if msg['type'] == 'get':
            reply_to_client(msg)
        else:
            log_entry = msg
            log_entry['term'] = TERM
            LOG.append(log_entry)
            send_appends()
    #no leader so fail request
    else:
        msg = client_response(msg, 'fail')
        sock.send(json.dumps(msg).encode() + b'\n')

# reply to the client about log entry
def reply_to_client(entry):
    global PAIRS
    response = client_response(entry, 'ok')
    # for get request, add  requested value to reply
    if entry['type'] == 'get':
        #return the associated value for the key
        if entry['key'] in PAIRS:
            response['value'] = PAIRS[entry['key']]
        # Else, empty
        else:
            response['value'] = ''
    sock.send(json.dumps(response).encode() + b'\n')

# Sends a vote request
def send_vote():
    global LOG
    #-1 for the initial election
    #candidates vote for these only if their logs are empty
    last_term = -1
    last_index = -1
    # If log not empty, use index and term of last element in log
    if len(LOG) > 1:
        last_index = len(LOG) - 1
        last_term = LOG[last_index]['term']
    vote_req = {'src': my_id, 'dst': 'FFFF', 'leader': cur_leader , 'type': 'vote-req', 'term': TERM, 'last-index': last_index, 'last-term': last_term}
    sock.send(json.dumps(vote_req).encode() + b'\n')

# Triggers the election
def trigger_election():
    global cur_role
    global TERM
    global RESP_NUM
    global cur_leader 
    cur_role = 'candidate'
    cur_leader  = 'FFFF'
    RESP_NUM = 1
    TERM += 1
    # start timeout again if split vote
    reset_timeout()
    send_vote()

#5.4.1 requirements
def check_log_reqs(msg):
    global LOG
    #if our log is also empty, we vote
    if msg['last-term'] == -1 and msg['last-index'] == -1:
        return len(LOG) == 1
    # always true
    if len(LOG) == 1:
        return True
    #their last term is larger than ours
    if LOG[len(LOG) - 1]['term'] < msg['last-term']:
        return True
    # for same last terms, compare log size
    elif LOG[len(LOG) - 1]['term'] == msg['last-term']:
        return msg['last-index'] >= len(LOG) - 1
    # their last term is smaller, reject
    else:
        return False

# Checks if we have already voted
def if_voted(rid):
    # have not voted yet
    if my_vote  == None:
        return False
    # false if we voted for the given ID
    return my_vote  != rid

# if should vote for them
def handle_vote(msg):
    global cur_role
    global TERM
    global cur_leader 
    global my_vote 
    # if has a higher term, we vote
    # if lower term, revert to a follower since messed up
    if msg['term'] > TERM:
        cur_role = 'follower'
        TERM = msg['term'] 
        cur_leader  = 'FFFF'
        my_vote  = None
    # candidate log up to date and not voted
    if check_log_reqs(msg) and not if_voted(msg['src']):
        my_vote  = msg['src']
        vote_ack = {'src': my_id, 'dst': msg['src'], 'leader': cur_leader , 'type': 'vote-accept', 'term': TERM}
        # Reset our timeout
        reset_timeout()
        sock.send(json.dumps(vote_ack).encode() + b'\n')
    # reject
    else:
        vote_rej = {'src': my_id, 'dst': msg['src'], 'leader': cur_leader , 'type': 'vote-reject', 'term': TERM}
        sock.send(json.dumps(vote_rej).encode() + b'\n')

#new leader if majority
def vote_accept():
    global cur_role
    global cur_leader 
    global RESP_NUM
    global HB_TO_MAP
    global NEXT_INDICES
    global MATCH_INDEX
    global APP_TIMER
    if cur_role == 'candidate':
        RESP_NUM += 1
        if RESP_NUM >= MAJORITY:
            cur_role = 'leader'
            cur_leader  = my_id
            RESP_NUM = 1
            APP_TIMER = float(time.time() * 1000)
            # initialize nextIndex to our last index + 1 and matchIndex to 0
            HB_TO_MAP = {}
            NEXT_INDICES = {}
            MATCH_INDEX = {}
            for rid in replica_ids:
                NEXT_INDICES[rid] = len(LOG)
                MATCH_INDEX[rid] = 0
                HB_TO_MAP[rid] = float(time.time() * 1000)

# handles rejected vote
def vote_reject(msg):
    global cur_role
    global TERM
    global RESP_NUM
    global cur_leader 
    global my_vote 
    print(my_id + ' rejected by: ' + msg['src'])
    if cur_role == 'candidate':
        # becomming a follower
        if msg['term'] > TERM:
            cur_role = 'follower'
            TERM = msg['term']
            RESP_NUM = 1
            cur_leader  = msg['leader']
            my_vote  = None
            reset_timeout()

def check_prev_term(index, term):
    global LOG
    #accept
    if index == 0:
        return True
    if len(LOG) == 1:
        return False
    # need  index to be within our log
    if index < len(LOG):
        return LOG[index]['term'] == term
    else:
        return False

# Updates log
def update_log(start_index, entries):
    global LOG
    log_index = start_index
    entry_index = 0
    overwrite = False
    # Loop and check entries
    while log_index < len(LOG) and entry_index < len(entries):
        # If overwrite is set, replace the entry
        if overwrite:
            LOG[log_index] = entries[entry_index]
            log_index += 1
            entry_index += 1
        else:
            # if conflict then overwrite current entry and all following
            if LOG[log_index]['term'] != entries[entry_index]['term']:
                overwrite = True
                LOG[log_index] = entries[entry_index]
            log_index += 1
            entry_index += 1

    # Append remaing
    while entry_index < len(entries):
        LOG.append(entries[entry_index])
        entry_index += 1


#AppendRC messages
def handle_append(msg):
    global cur_role
    global TERM
    global cur_leader 
    global COMMIT_INDEX
    #for  heartbeat, initialize to None
    reply = None
    # should be  follower if the leader has larger term
    if msg['term'] > TERM:
        cur_role = 'follower'
        TERM = msg['term']
        cur_leader  = msg['leader']
    # if leader and bigger term, send a fail
    elif cur_role == 'leader' or msg['term'] < TERM:
        reply = {'src': my_id, 'dst': msg['src'], 'leader': cur_leader , 'type': 'append-reply', 'term': TERM, 'success': False}
        sock.send(json.dumps(reply).encode() + b'\n')
        return
    # update the leader for followers
    else:
        cur_leader  = msg['leader']

    # reset timeout
    reset_timeout()

    if cur_role == 'follower':
        # If not empty, try to update log
        if len(msg['entries']) > 0:
            # if has the same term, continue
            if check_prev_term(msg['prev-log-index'], msg['prev-log-term']):
                reply = {'src': my_id, 'dst': msg['src'], 'leader': cur_leader , 'type': 'append-reply', 'term': TERM, 'success': True,
                'new_index': msg['prev-log-index'] + len(msg['entries'])}
                sock.send(json.dumps(reply).encode() + b'\n')
                update_log(msg['prev-log-index'] + 1, msg['entries'])
            # else fail
            else:
                reply = {'src': my_id, 'dst': msg['src'], 'leader': cur_leader , 'type': 'append-reply', 'term': TERM, 'success': False}
                sock.send(json.dumps(reply).encode() + b'\n')

        # Always update if leader has a higher one
        if msg['leader-commit'] > COMMIT_INDEX:
            COMMIT_INDEX = min(msg['leader-commit'], len(LOG) - 1)

# response to append message
def append_reply(msg):
    global cur_role
    global cur_leader 
    global TERM
    global my_vote 
    global NEXT_INDICES
    global MATCH_INDEX
    global ACCEPT_SEEN
    # update match and next indices for replica
    if msg['success']:
        NEXT_INDICES[msg['src']] = msg['new_index'] + 1
        MATCH_INDEX[msg['src']] = msg['new_index']
    # why failed?
    else:
        #revert to follower
        if msg['term'] > TERM:
            cur_role = 'follower'
            TERM = msg['term']
            cur_leader  = msg['leader']
            my_vote  = None
        # decrement next index and try again
        else:
            NEXT_INDICES[msg['src']] = NEXT_INDICES[msg['src']] - 1


def check_apply_index():
    global LAST_APPLIED
    global COMMIT_INDEX
    global LOG
    global PAIRS
    # If can commit more
    if COMMIT_INDEX > LAST_APPLIED:
        to_apply = LOG[LAST_APPLIED + 1: COMMIT_INDEX + 1]
        for entry in to_apply:
            # execute put by storing pair
            if entry['type'] == 'put':
                PAIRS[entry['key']] = entry['value']
            # reply to client
            if cur_role == 'leader':
                reply_to_client(entry)
        LAST_APPLIED = COMMIT_INDEX


def check_commit_index():
    global COMMIT_INDEX
    match_ind = list(MATCH_INDEX.values())
    # sort the list
    match_ind.sort()
    index_occurances = {}
    # iterate through keys
    for ind in match_ind:
        # every key in  map is either this index or smaller
        for key in index_occurances:
            index_occurances[key] = index_occurances[key] + 1
        if ind not in index_occurances:
            index_occurances[ind] = 2
    # temp value for new commitIndex
    new_commit = COMMIT_INDEX
    # loop through index occurances
    for key in index_occurances:
        # make new index if exceeds current value
        if index_occurances[key] >= MAJORITY:
            new_commit = max(new_commit, key)
    # Update commit index
    if COMMIT_INDEX == 0:
        COMMIT_INDEX = new_commit
    elif LOG[new_commit]['term'] == TERM:
        COMMIT_INDEX = new_commit


def send_appends():
    global HB_TO_MAP
    for rid in replica_ids:
        next_ind = NEXT_INDICES[rid]
        if next_ind <= len(LOG) - 1:
            end_ind = len(LOG)
            if end_ind - next_ind > 500:
                end_ind = 500 + next_ind
            append = {'src': my_id, 'dst': rid, 'leader': cur_leader , 'type': 'append-entries', 'term': TERM, 'leader-commit': COMMIT_INDEX,
            'prev-log-index': next_ind - 1, 'prev-log-term': None, 'entries': LOG[next_ind:end_ind]}
            # need to include the term
            if next_ind > 1:
                append['prev-log-term'] = LOG[next_ind - 1]['term']
            sock.send(json.dumps(append).encode() + b'\n')
            HB_TO_MAP[rid] = float(time.time() * 1000)

# Start initial countdown to trigger election
reset_timeout()
while True:
    ready = select.select([sock], [], [], SELECT_WAIT_TIME)[0]
    if sock in ready:
        msgs = recv_msgs(sock)
        for msg in msgs:

            if msg['type'] in ['get', 'put']:
                client_message(msg)
            elif msg['type'] == 'vote-req':
                handle_vote(msg)
            elif msg['type'] == 'vote-accept':
                vote_accept()
            elif msg['type'] == 'vote-reject':
                vote_reject(msg)
            # append-entries
            elif msg['type'] == 'append-entries':
                handle_append(msg)
            # If  leader, reply to the append
            elif msg['type'] == 'append-reply':
                if cur_role == 'leader':
                    append_reply(msg)
                   

    # check if majority have accepted N changes 
    if cur_role == 'leader':
        check_commit_index()

    check_apply_index()

    # not leader
    if cur_role != 'leader':
        if ((time.time() * 1000) - LAST_TO) > ELECTION_TO:
            trigger_election()

    # heartbeats to prevent elections
    if cur_role == 'leader':
        if ((time.time() * 1000) - APP_TIMER) >= APP_LIMIT:
            send_appends()
            APP_TIMER = float(time.time() * 1000)

        for rid in replica_ids:
            if ((time.time() * 1000) - HB_TO_MAP[rid]) >= HB_LIMIT:
                hb = {'src': my_id, 'leader': cur_leader , 'type': 'append-entries', 'term': TERM, 'leader-commit': COMMIT_INDEX, 'entries': []}
                # Reset heartbeat timer
                HB_TO_MAP[rid] = float(time.time() * 1000)
                # Send heartbeat
                hb['dst'] = rid
                sock.send(json.dumps(hb).encode() + b'\n')
